# -*- coding: utf-8 -*-
"""Zomato Restaurants EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gG2DUSCZbek522aPqNp5IBGKiP8LMgej
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
import plotly.express as px

df = pd.read_csv('/content/drive/MyDrive/Zomato/zomato.csv', encoding='latin1')
df.head()

country_dict = {
    1:"India", 14:"Australia", 30:"Brazil", 37:"Canada", 94:"Indonesia",
    148:"New Zealand", 162:"Philippines", 166:"Qatar", 184:"Singapore",
    189:"South Africa", 191:"Sri Lanka", 208:"Turkey", 214:"UAE",
    215:"United Kingdom", 216:"United States"
}

df['Country'] = df['Country Code'].map(country_dict)
print(df[['Country Code','Country']].head())

country_counts = df['Country'].value_counts().head(10)
plt.figure(figsize=(10,6))
sns.barplot(x=country_counts.values, y=country_counts.index, palette="viridis")
plt.title("Top 10 Countries with Most Restaurants")
plt.xlabel("Number of Restaurants")
plt.show()

city_counts = df['City'].value_counts().head(10)
plt.figure(figsize=(10,6))
sns.barplot(x=city_counts.values, y=city_counts.index, palette="magma")
plt.title("Top 10 Cities with Most Restaurants")
plt.xlabel("Number of Restaurants")
plt.show()

cuisines = df['Cuisines'].dropna().str.split(',').explode().str.strip()
top_cuisines = cuisines.value_counts().head(10)
plt.figure(figsize=(10,6))
sns.barplot(x=top_cuisines.values, y=top_cuisines.index, palette="crest")
plt.title("Top 10 Most Popular Cuisines")
plt.xlabel("Number of Restaurants")
plt.show()

cuisine_rating = df.explode('Cuisines').groupby('Cuisines')['Aggregate rating'].mean().sort_values(ascending=False).head(10)
cuisine_rating.plot(kind='barh', figsize=(10,8), color="teal")
plt.title("Top 10 Cuisines by Average Rating")
plt.xlabel("Average Rating")
plt.show()

avg_cost_country = df.groupby('Country')['Average Cost for two'].mean().sort_values(ascending=False).head(10)
avg_cost_country.plot(kind="bar", figsize=(10,6), color="orange")
plt.title("Average Cost for Two by Country (Top 10)")
plt.ylabel("Average Cost")
plt.show()

avg_cost_country.plot(kind="bar", figsize=(10,6), color="orange", logy=True)
plt.title("Average Cost for Two by Country (Top 10) [Log Scale]")
plt.ylabel("Average Cost (log scale)")
plt.show()

delivery = df['Has Online delivery'].value_counts()
delivery.plot(kind='bar', color=['blue','red'], figsize=(6,4))
plt.title("Restaurants Offering Online Delivery")
plt.show()

corr_matrix = df[['Average Cost for two','Price range','Aggregate rating','Votes']].corr()
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation between Cost, Votes & Ratings")
plt.show()

avg_rating_country = df.groupby('Country')['Aggregate rating'].mean().sort_values(ascending=False).head(10)
avg_rating_country.plot(kind="bar", figsize=(10,6), color="green")
plt.title("Top 10 Countries by Average Rating")
plt.ylabel("Average Rating")
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(data=df, x='Has Table booking', y='Votes', palette="Set2")
plt.title("Votes Distribution by Table Booking")
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(data=df, x='Has Table booking', y='Votes', palette="Set2")
plt.yscale("log")
plt.title("Votes Distribution by Table Booking (Log Scale)")
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(data=df, x='Has Online delivery', y='Votes', palette="Set3")
plt.title("Votes Distribution by Online Delivery")
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(data=df, x='Has Online delivery', y='Votes', palette="Set3")
plt.yscale("log")
plt.title("Votes Distribution by Online Delivery (Log Scale)")
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='Votes', y='Aggregate rating', alpha=0.5)
plt.title("Votes vs Rating")
plt.xlabel("Number of Votes")
plt.ylabel("Aggregate Rating")
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='Votes', y='Aggregate rating', alpha=0.5)
plt.xscale("log")
plt.title("Votes vs Rating (Log Scale)")
plt.xlabel("Number of Votes (Log Scale)")
plt.ylabel("Aggregate Rating")
plt.show()